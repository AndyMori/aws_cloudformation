AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: ->
  A simple apigateway.
Parameters:
  # Default Provided Parameters from Serverless Pipeline
  Environment:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: "ProofOfConcept"

Resources:
  #MyLambdaLayer:
  #  Type: AWS::Serverless::LayerVersion
  #  Properties:
  #    LayerName: !Sub '${Environment}-Layer'
  #    ContentUri: ./layer/build
  #    Description: "Slow me down."
  #    CompatibleRuntimes:
  #      - python3.8
  #    RetentionPolicy: Delete
  #  Metadata:
  #    BuildMethod: python3.8
  ServerlessApiLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: MyApi
    Properties:
      LogGroupName: !Sub ${Environment}-apigateway-accesslogs
      RetentionInDays: 1

  # ApiRole:
  #  Type: AWS::IAM::Role
  #  Properties:
  #    AssumeRolePolicyDocument: 
  #      Version: "2012-10-17"
  #      Statement:
  #        - Effect: Allow
  #          Sid: 'serverlessApiTestingAcc8vzz'
  #          Resource: '*'
  #          Action: 
  #            - 'log*'
  #            - 'execute-api*'
  #            - 'lambda*'


  MyFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${Environment}-function-acc8vzz'
      Runtime: python3.8
      InlineCode: |
        import os
        def handler(event, context):
            print('did you execute, correctly')
            return {'body': 'Hello World!', 'statusCode': 200}
      Handler: index.handler
      AutoPublishAlias: live
      #Layers:
      #  - !Ref MyLambdaLayer
      Description: >-
        ABE Python Serverless Example
      MemorySize: 128
      Timeout: 900
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /
            Method: get
            RestApiId:
              Ref: MyApi
      #VpcConfig:
      #  SecurityGroupIds:
      #    - !Ref MySecurityGroup
      #  SubnetIds:
      #    #- !Ref PrivateSubnet
      #    - !Ref PublicSubnet 

  MyApi:
    Type: 'AWS::Serverless::Api'
    Properties:
      StageName: prod
      MethodSettings:
        - ResourcePath: /*
          HttpMethod: '*'
          DataTraceEnabled: true
          LoggingLevel: INFO
          MetricsEnabled: true
      AccessLogSetting:
        DestinationArn: !Sub '${ServerlessApiLogGroup.Arn}'
        Format: '{
                    "requestId": "$context.requestId",
                    "sourceIp": "$context.identity.sourceIp",
                    "requestTime": "$context.requestTime",
                    "httpMethod": "$context.httpMethod",
                    "path": "$context.path",
                    "protocol": "$context.protocol",
                    "status": $context.status,
                    "responseLatency": $context.responseLatency,
                    "responseLength": "$context.responseLength",
                    "integrationRequestId": "$context.integration.requestId",
                    "functionResponseStatus": "$context.integration.status",
                    "integrationLatency": "$context.integration.latency",
                    "integrationServiceStatus": "$context.integration.integrationStatus"
                   }'
    
      